/*
 solmath.h
 
 
 Created by Juan Manuel Solano Altamirano on 11/03/13.
 e-mail: jmsolanoalt@gmail.com
 This program was developed in The University of Guelph,
 50 Stone Road West, Guelph
 ON, N1G 2W1, Canada
 
 */

#ifndef _MYMATH_H_
#define _MYMATH_H_
#ifndef EPSTODIVIDE
#define EPSTODIVIDE (1.0e-10)
#endif
/* ************************************************************************** */
/* ************************************************************************** */
int factorial(const int n); //This function only works up to n=16.
/* ************************************************************************** */
int doubfact(const int n);  //This function only works up to n=19.
/* ************************************************************************** */
double magV3(double (&v)[3]);
/* ************************************************************************** */
void normalizeV3(double (&v)[3]);
/* ************************************************************************** */
void crossProductV3(double (&a)[3],double (&b)[3],double (&c)[3]);
/* ************************************************************************** */
double dotProductV3(double (&a)[3],double (&b)[3]);
/* ************************************************************************** */
double detM3x3(double (&a)[3][3]);
/* ************************************************************************** */
void invertM3x3(double (&oM)[3][3],double (&rM)[3][3]);
/* ************************************************************************** */
/* ************************************************************************** */
inline void sort2intmin2max(int &a,int&b) {
   if (a<=b) {return; }
   else {
      int c=a;
      a=b;
      b=c;
   }
   return;
}
/* ************************************************************************** */
double rfactorial(const int n);
/* ************************************************************************** */
//double distancePointsV3(double (&a)[3],double (&b)[3]);

template <typename T> 
double distancePointsV3(T a,T b){
  double r = 0.0e-10;
  for (int i=0;i<3;i++) {
    r += a[i]-b[i];
    r *= r;
  }
  return sqrt(r);
};
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
/* ************************************************************************** */
#endif//_MYMATH_H_

